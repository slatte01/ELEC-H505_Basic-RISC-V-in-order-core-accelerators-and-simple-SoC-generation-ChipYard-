L2 InclusiveCache Client Map:
	0 <= serial_tl_0
	1 <= Core 0 DCache
	2 <= Core 0 ICache

[C0] ======BOOM Tile 0 Params======

[C0] ====Overall Frontend Params====

[C0] ==L1-ICache==
[C0] Fetch bytes   : 8
[C0] Block bytes   : 64
[C0] Row bytes     : 8
[C0] Word bits     : 64
[C0] Sets          : 64
[C0] Ways          : 4
[C0] Refill cycles : 8
[C0] RAMs          : (64 x 512) using 1 banks
[C0] Single-banked
[C0] I-TLB ways    : 32

[C0] ==Branch Predictor Memory Sizes==

[C0] bank0 tage_l2: 128 x 44 = 704
[C0] bank0 tage_l4: 128 x 44 = 704
[C0] bank0 tage_l8: 256 x 48 = 1536
[C0] bank0 tage_l16: 256 x 48 = 1536
[C0] bank0 tage_l32: 128 x 52 = 832
[C0] bank0 tage_l64: 128 x 52 = 832
[C0] bank0 btb_meta_way0: 128 x 124 = 1984
[C0] bank0 btb_data_way0: 128 x 56 = 896
[C0] bank0 btb_meta_way1: 128 x 124 = 1984
[C0] bank0 btb_data_way1: 128 x 56 = 896
[C0] bank0 ebtb: 128 x 40 = 640
[C0] bank0 bim: 2048 x 8 = 2048
[C0] Total bpd size: 14 KB

[C0] ====Overall Core Params====

[C0] ===ExecutionUnits===

[C0] ==1-wide Machine==
[C0] ==3 Issue==

[C0] ==ExeUnit==
[C0]  - Mem
[C0] ==ExeUnit==
[C0]  - ALU
[C0]  - Mul
[C0]  - Div
[C0]  - IFPU

[C0] ===FP Pipeline===

[C0] ==Floating Point Regfile==
[C0] Num RF Read Ports     : 3
[C0] Num RF Write Ports    : 2
[C0] RF Cost (R+W)*(R+2W)  : 35
[C0] Bypassable Units      : List(false, false)
[C0] Num Wakeup Ports      : 2
[C0] Num Bypass Ports      : 0

[C0] ==ROB==
[C0] Machine Width      : 1
[C0] Rob Entries        : 32
[C0] Rob Rows           : 32
[C0] Rob Row size       : 5
[C0] log2Ceil(coreWidth): 0
[C0] FPU FFlag Ports    : 2

[C0] ===Other Core Params===
[C0] Fetch Width           : 4
[C0] Decode Width          : 1
[C0] Issue Width           : 3
[C0] ROB Size              : 32
[C0] Issue Window Size     : List(8, 8, 8) (Age-based Priority)
[C0] Load/Store Unit Size  : 8/8
[C0] Num Int Phys Registers: 52
[C0] Num FP  Phys Registers: 48
[C0] Max Branch Count      : 8
[C0] ==Integer Regfile==
[C0] Num RF Read Ports     : 4
[C0] Num RF Write Ports    : 2
[C0] RF Cost (R+W)*(R+2W)  : 48
[C0] Bypassable Units      : List(true, true)

[C0] Num Slow Wakeup Ports : 2
[C0] Num Fast Wakeup Ports : 1
[C0] Num Bypass Ports      : 3

[C0] DCache Ways           : 4
[C0] DCache Sets           : 64
[C0] DCache nMSHRs         : 2
[C0] ICache Ways           : 4
[C0] ICache Sets           : 64
[C0] D-TLB Ways            : 8
[C0] I-TLB Ways            : 32
[C0] Paddr Bits            : 32
[C0] Vaddr Bits            : 39

[C0] Using FPU Unit?       : true
[C0] Using FDivSqrt?       : true
[C0] Using VM?             : true


Interrupt map (2 harts 1 interrupts):
  [1, 1] => uart_0

Clock sbus_0: using diplomatically specified frequency of 500.0.
Clock pbus_0: using diplomatically specified frequency of 500.0.
Clock fbus_0: using diplomatically specified frequency of 500.0.
Clock mbus_0: using diplomatically specified frequency of 500.0.
Clock cbus_0: using diplomatically specified frequency of 500.0.
/dts-v1/;

/ {
	#address-cells = <1>;
	#size-cells = <1>;
	compatible = "ucb-bar,chipyard-dev";
	model = "ucb-bar,chipyard";
	L27: aliases {
		serial0 = &L21;
	};
	L13: chosen {
		stdout-path = &L21;
	};
	L26: cpus {
		#address-cells = <1>;
		#size-cells = <0>;
		timebase-frequency = <1000000>;
		L8: cpu@0 {
			clock-frequency = <0>;
			compatible = "ucb-bar,boom0", "riscv";
			d-cache-block-size = <64>;
			d-cache-sets = <64>;
			d-cache-size = <16384>;
			d-tlb-sets = <1>;
			d-tlb-size = <8>;
			device_type = "cpu";
			hardware-exec-breakpoint-count = <0>;
			i-cache-block-size = <64>;
			i-cache-sets = <64>;
			i-cache-size = <16384>;
			i-tlb-sets = <1>;
			i-tlb-size = <32>;
			mmu-type = "riscv,sv39";
			next-level-cache = <&L6>;
			reg = <0x0>;
			riscv,isa = "rv64imafdczicsr_zifencei_zihpm";
			riscv,pmpgranularity = <4>;
			riscv,pmpregions = <8>;
			status = "okay";
			timebase-frequency = <1000000>;
			tlb-split;
			L7: interrupt-controller {
				#interrupt-cells = <1>;
				compatible = "riscv,cpu-intc";
				interrupt-controller;
			};
		};
	};
	L28: htif {
		compatible = "ucb,htif0";
	};
	L20: memory@8000000 {
		device_type = "memory";
		reg = <0x8000000 0x10000>;
	};
	L16: memory@80000000 {
		device_type = "memory";
		reg = <0x80000000 0x10000000>;
	};
	L25: soc {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "ucb-bar,chipyard-soc", "simple-bus";
		ranges;
		L19: boot-address-reg@1000 {
			reg = <0x1000 0x1000>;
			reg-names = "control";
		};
		L6: cache-controller@2010000 {
			cache-block-size = <64>;
			cache-level = <2>;
			cache-sets = <1024>;
			cache-size = <524288>;
			cache-unified;
			compatible = "sifive,inclusivecache0", "cache";
			next-level-cache = <&L16 &L20>;
			reg = <0x2010000 0x1000>;
			reg-names = "control";
			sifive,mshr-count = <7>;
		};
		L3: cbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "cbus_clock";
			compatible = "fixed-clock";
		};
		L9: clint@2000000 {
			compatible = "riscv,clint0";
			interrupts-extended = <&L7 3 &L7 7>;
			reg = <0x2000000 0x10000>;
			reg-names = "control";
		};
		L22: clock-gater@100000 {
			reg = <0x100000 0x1000>;
			reg-names = "control";
		};
		L11: debug-controller@0 {
			compatible = "sifive,debug-013", "riscv,debug-013";
			debug-attach = "jtag";
			interrupts-extended = <&L7 65535>;
			reg = <0x0 0x1000>;
			reg-names = "control";
		};
		L4: error-device@3000 {
			compatible = "sifive,error0";
			reg = <0x3000 0x1000>;
		};
		L2: fbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "fbus_clock";
			compatible = "fixed-clock";
		};
		L10: interrupt-controller@c000000 {
			#interrupt-cells = <1>;
			compatible = "riscv,plic0";
			interrupt-controller;
			interrupts-extended = <&L7 11 &L7 9>;
			reg = <0xc000000 0x4000000>;
			reg-names = "control";
			riscv,max-priority = <1>;
			riscv,ndev = <1>;
		};
		L5: mbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "mbus_clock";
			compatible = "fixed-clock";
		};
		L1: pbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "pbus_clock";
			compatible = "fixed-clock";
		};
		L18: rom@10000 {
			compatible = "sifive,rom0";
			reg = <0x10000 0x10000>;
			reg-names = "mem";
		};
		L0: sbus_clock {
			#clock-cells = <0>;
			clock-frequency = <500000000>;
			clock-output-names = "sbus_clock";
			compatible = "fixed-clock";
		};
		L21: serial@10020000 {
			clocks = <&L1>;
			compatible = "sifive,uart0";
			interrupt-parent = <&L10>;
			interrupts = <1>;
			reg = <0x10020000 0x1000>;
			reg-names = "control";
		};
		L23: tile-reset-setter@110000 {
			reg = <0x110000 0x1000>;
			reg-names = "control";
		};
	};
};

Generated Address Map
	       0 -     1000 ARWX  debug-controller@0
	    1000 -     2000 ARW   boot-address-reg@1000
	    3000 -     4000 ARWX  error-device@3000
	   10000 -    20000  R X  rom@10000
	  100000 -   101000 ARW   clock-gater@100000
	  110000 -   111000 ARW   tile-reset-setter@110000
	 2000000 -  2010000 ARW   clint@2000000
	 2010000 -  2011000 ARW   cache-controller@2010000
	 8000000 -  8010000 ARWXC memory@8000000
	 c000000 - 10000000 ARW   interrupt-controller@c000000
	10020000 - 10021000 ARW   serial@10020000
	80000000 - 90000000 ARWXC memory@80000000

IOCells generated by IOBinders:
  IOBinder for interface sifive.blocks.devices.uart.HasPeripheryUARTModuleImp generated:
    1 X GenericDigitalInIOCell
    1 X GenericDigitalOutIOCell
  IOBinder for interface testchipip.boot.CanHavePeripheryCustomBootPin generated:
    1 X GenericDigitalInIOCell
  IOBinder for interface freechips.rocketchip.devices.debug.HasPeripheryDebug generated:
    3 X GenericDigitalInIOCell
    1 X GenericDigitalOutIOCell
  IOBinder for interface chipyard.clocking.CanHaveClockTap generated:
    1 X GenericDigitalOutIOCell
  IOBinder for interface testchipip.serdes.CanHavePeripheryTLSerial generated:
    35 X GenericDigitalInIOCell
    34 X GenericDigitalOutIOCell

  Total generated 77 IOCells:
    40 X GenericDigitalInIOCell
    37 X GenericDigitalOutIOCell
Harness binder clock is 100.0
[[33mwarn[0m] generators/rocket-chip/src/main/scala/tilelink/Monitor.scala:658:26: Dynamic index with width 1 is too large for extractee of width 1
[[33mwarn[0m]       monAssert(!inflight(bundle.a.bits.source), "'A' channel re-used a source ID" + extra)
[[33mwarn[0m]                          ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/tilelink/Monitor.scala:682:25: Dynamic index with width 1 is too large for extractee of width 1
[[33mwarn[0m]       assume(((inflight)(bundle.d.bits.source)) || same_cycle_resp, "'D' channel acknowledged for nothing inflight" + extra)
[[33mwarn[0m]                         ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/tilelink/Monitor.scala:766:26: Dynamic index with width 1 is too large for extractee of width 1
[[33mwarn[0m]       monAssert(!inflight(bundle.c.bits.source), "'C' channel re-used a source ID" + extra)
[[33mwarn[0m]                          ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/tilelink/Monitor.scala:793:25: Dynamic index with width 1 is too large for extractee of width 1
[[33mwarn[0m]       assume(((inflight)(bundle.d.bits.source)) || same_cycle_resp, "'D' channel acknowledged for nothing inflight" + extra)
[[33mwarn[0m]                         ^
[[33mwarn[0m] generators/rocket-chip-inclusive-cache/design/craft/inclusivecache/src/SinkC.scala:160:43: Dynamic index with width 6 is too large for extractee of width 2
[[33mwarn[0m]     io.rel_pop.ready := putbuffer.io.valid(io.rel_pop.bits.index)
[[33mwarn[0m]                                           ^
[[33mwarn[0m] generators/boom/src/main/scala/ifu/icache.scala:176:25: Dynamic index with width 7 is too small for extractee of width 256
[[33mwarn[0m]     val s1_vb = vb_array(Cat(i.U, s1_idx))
[[33mwarn[0m]                         ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/rocket/CSR.scala:953:100: Dynamic index with width 8 is too large for extractee of width 64
[[33mwarn[0m]   val delegate = usingSupervisor.B && reg_mstatus.prv <= PRV.S.U && Mux(cause(xLen-1), read_mideleg(cause_lsbs), read_medeleg(cause_lsbs))
[[33mwarn[0m]                                                                                                    ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/rocket/CSR.scala:953:126: Dynamic index with width 8 is too large for extractee of width 64
[[33mwarn[0m]   val delegate = usingSupervisor.B && reg_mstatus.prv <= PRV.S.U && Mux(cause(xLen-1), read_mideleg(cause_lsbs), read_medeleg(cause_lsbs))
[[33mwarn[0m]                                                                                                                              ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/rocket/CSR.scala:954:80: Dynamic index with width 8 is too large for extractee of width 64
[[33mwarn[0m]   val delegateVS = reg_mstatus.v && delegate && Mux(cause(xLen-1), read_hideleg(cause_lsbs), read_hedeleg(cause_lsbs))
[[33mwarn[0m]                                                                                ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/rocket/CSR.scala:954:106: Dynamic index with width 8 is too large for extractee of width 64
[[33mwarn[0m]   val delegateVS = reg_mstatus.v && delegate && Mux(cause(xLen-1), read_hideleg(cause_lsbs), read_hedeleg(cause_lsbs))
[[33mwarn[0m]                                                                                                          ^
[[33mwarn[0m] generators/rocket-chip/src/main/scala/devices/debug/Debug.scala:1729:37: Dynamic index with width 1 is too large for extractee of width 1
[[33mwarn[0m]     val hartHalted   = haltedBitRegs(selectedHartReg)
[[33mwarn[0m]                                     ^
[[33mwarn[0m] There were [33m11 warning(s)[0m during hardware elaboration.
